// Generated by CoffeeScript 1.9.0
(function() {
  'use strict';
  angular;
  fabric;
  var AngularBase, BaseDirective, EmbedDirective, ErrorDirective, FileDirective, HashDirective, MarkdownDirective, ModeDirective, PartialDirective, PopupDirective, ProcDirective, QuestionsDirective, ResourceDirective, RootDirective, StepDirective, StepsDirective, TabsDirective, directives_module, install_angular_cls,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __hasProp = {}.hasOwnProperty;

  directives_module = angular.module('ciboulot.directives', ['ciboulot.services']);

  AngularBase = window.ciboulot['AngularBase'];

  install_angular_cls = window.ciboulot['install_angular_cls'];

  BaseDirective = (function(_super) {
    __extends(BaseDirective, _super);

    BaseDirective.prototype.__name = 'BaseDirective';

    BaseDirective.prototype.__injections = AngularBase.prototype.__injections.concat(['$compile']);

    function BaseDirective() {}

    BaseDirective.prototype.link = function(scope, elm, attrs, controller) {
      this.$scope = scope;
      this.$elm = elm;
      this.$attrs = attrs;
      return this.$controller = controller;
    };

    BaseDirective.prototype.__factory = function(cls) {

      /*
      Return a link function that 
      instantiates the DiretiveCls on each call
       */
      var link;
      link = function(scope, elm, attrs, controller) {
        var directive_obj;
        directive_obj = new cls();
        return directive_obj.link(scope, elm, attrs, controller);
      };
      return {
        link: link
      };
    };

    BaseDirective.prototype.__module_install_function = function(cls, module) {
      return module.directive;
    };

    return BaseDirective;

  })(AngularBase);

  ErrorDirective = (function(_super) {
    __extends(ErrorDirective, _super);

    function ErrorDirective() {
      return ErrorDirective.__super__.constructor.apply(this, arguments);
    }

    ErrorDirective.prototype.__name = 'error';

    ErrorDirective.prototype.link = function(scope, elm, attrs, controller) {
      var msg;
      ErrorDirective.__super__.link.call(this, scope, elm, attrs, controller);
      msg = "resource not found: " + (this.$elm.attr('src'));
      return this.$elm.text(msg);
    };

    return ErrorDirective;

  })(BaseDirective);

  ResourceDirective = (function(_super) {
    __extends(ResourceDirective, _super);

    function ResourceDirective() {
      return ResourceDirective.__super__.constructor.apply(this, arguments);
    }

    ResourceDirective.prototype.__name = 'resource';

    ResourceDirective.prototype.__injections = BaseDirective.prototype.__injections.concat(['$rootScope', 'fetch_resource', 'MarkdownService', 'FETCHING']);

    ResourceDirective.prototype.link = function(scope, elm, attrs, controller) {
      ResourceDirective.__super__.link.call(this, scope, elm, attrs, controller);
      this.resource_id = elm.attr('src');
      return this.$scope.$watch(this.get_resource.bind(this), this.on_resource_watcher.bind(this));
    };

    ResourceDirective.prototype.get_resource = function() {
      this.resource = this.$rootScope.__resources[this.resource_id];
      return this.resource;
    };

    ResourceDirective.prototype.on_resource_watcher = function(resource, old_resource) {
      if (resource === void 0) {
        return this.fetch_resource(this.resource_id);
      } else if (resource !== this.FETCHING) {
        return this.on_resource();
      }
    };

    ResourceDirective.prototype.on_resource = function() {
      return this.display();
    };

    ResourceDirective.prototype.display = function() {

      /*
      Append resource to @$elm
       */
      var cntl, name, resource_elm, src, _results;
      this.$elm.empty();
      cntl = this.resource.controller;
      if (cntl === "embed") {
        src = this.resource.data.src;
      } else {
        src = this.resource_id;
      }
      resource_elm = angular.element("<div class='" + this.__name + "' ng-controller='" + cntl + "' src='" + src + "' " + cntl + "=''></div>");
      resource_elm = (this.$compile(resource_elm))(this.$scope);
      this.$elm.append(resource_elm);
      _results = [];
      for (name in this.resource.data) {
        if (/[A-Z]|[_]|[0-9]/.test(name)) {
          _results.push(this.$scope[name] = this.resource.data[name]);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    return ResourceDirective;

  })(BaseDirective);

  EmbedDirective = (function(_super) {
    __extends(EmbedDirective, _super);

    function EmbedDirective() {
      return EmbedDirective.__super__.constructor.apply(this, arguments);
    }

    EmbedDirective.prototype.__name = 'embed';

    EmbedDirective.prototype.detect_embed_loop = function() {
      return this.resource_id in this.$rootScope.__displayed_resources;
    };

    EmbedDirective.prototype.display_embed_loop = function() {
      var embed_warning;
      embed_warning = angular.element("<div>Embed loop detected for " + this.resource_id + "</div>");
      embed_warning = (this.$compile(embed_warning))(this.$scope);
      this.$elm.empty();
      return this.$elm.append(embed_warning);
    };

    EmbedDirective.prototype.display = function() {
      if (this.detect_embed_loop()) {
        this.display_embed_loop();
      }
      return EmbedDirective.__super__.display.call(this);
    };

    return EmbedDirective;

  })(ResourceDirective);

  ModeDirective = (function(_super) {
    __extends(ModeDirective, _super);

    function ModeDirective() {
      return ModeDirective.__super__.constructor.apply(this, arguments);
    }

    ModeDirective.prototype.__name = 'mode';


    /*
    Watches:
        * resource
        * mode
     */

    ModeDirective.prototype.get_mode = function() {
      this.mode = this.$rootScope.__mode;
      return this.mode;
    };

    ModeDirective.prototype.on_mode_watcher = function(mode, old_mode) {
      this.mode = mode;
      return this.on_mode();
    };

    ModeDirective.prototype.on_mode = function() {
      return this.display();
    };

    ModeDirective.prototype.on_resource = function() {
      if (this.destroy_mode_watcher !== void 0) {
        this.destroy_mode_watcher();
      }
      return this.destroy_mode_watcher = this.$scope.$watch(this.get_mode.bind(this), this.on_mode_watcher.bind(this));
    };

    return ModeDirective;

  })(ResourceDirective);

  HashDirective = (function(_super) {
    __extends(HashDirective, _super);

    function HashDirective() {
      return HashDirective.__super__.constructor.apply(this, arguments);
    }

    HashDirective.prototype.__name = 'hash';


    /*
    Watches:
        * resource
        * mode
        * hash
     */

    HashDirective.prototype.hash_watcher = function() {
      return this.$rootScope.__hash;
    };

    HashDirective.prototype.on_hash_watcher = function(hash, previous_hash) {
      this.hash = hash;
      return this.on_hash();
    };

    HashDirective.prototype.on_hash = function() {
      return this.display();
    };

    HashDirective.prototype.on_mode = function() {
      if (this.destroy_hash_watcher !== void 0) {
        this.destroy_hash_watcher();
      }
      return this.destroy_hash_watcher = this.$scope.$watch(this.hash_watcher.bind(this), this.on_hash_watcher.bind(this));
    };

    return HashDirective;

  })(ModeDirective);

  PartialDirective = (function(_super) {
    __extends(PartialDirective, _super);

    function PartialDirective() {
      return PartialDirective.__super__.constructor.apply(this, arguments);
    }

    PartialDirective.prototype.__name = 'partial';

    PartialDirective.prototype.__injections = ModeDirective.prototype.__injections.concat(['fetch_partial', 'FETCHING']);


    /*
    Watches:
        * resource
        * mode
        * partial
     */

    PartialDirective.prototype.get_partial = function() {
      this.partial = this.$rootScope.__partials[this.__name + ":" + this.mode];
      return this.partial;
    };

    PartialDirective.prototype.on_partial_watcher = function(partial, old_partial) {
      if (partial === void 0) {
        return this.fetch_partial(this.__name, this.mode);
      } else if (partial !== this.FETCHING) {
        return this.on_partial();
      }
    };

    PartialDirective.prototype.on_partial = function() {
      return this.display();
    };

    PartialDirective.prototype.on_mode = function() {
      if (this.destroy_partial_watcher !== void 0) {
        this.destroy_partial_watcher();
      }
      return this.destroy_partial_watcher = this.$scope.$watch(this.get_partial.bind(this), this.on_partial_watcher.bind(this));
    };

    return PartialDirective;

  })(ModeDirective);

  MarkdownDirective = (function(_super) {
    __extends(MarkdownDirective, _super);

    function MarkdownDirective() {
      return MarkdownDirective.__super__.constructor.apply(this, arguments);
    }

    MarkdownDirective.prototype.__name = 'markdown';

    MarkdownDirective.prototype.__injections = ModeDirective.prototype.__injections.concat(['MarkdownService', '$interpolate']);

    MarkdownDirective.prototype.display = function() {
      var compiled_markdown, interpolated_markdown, markdown_html, markdown_service, markdown_text, procs_cover_elm, procs_elm;
      this.$elm.empty();
      markdown_text = this.resource['data']['text'];
      this.markdown_elm = angular.element("<div class='markdown'></div>");
      this.$elm.append(this.markdown_elm);
      this.$rootScope.__displayed_resources[this.resource_id] = this.markdown_elm;
      if (this.mode === 'static') {
        this.$elm.append("<div class='filler' style='height:1000px; width:10px;'></div>");
      }
      if (this.mode === 'display' || this.mode === 'static') {
        procs_elm = document.getElementById('procs');
        if (procs_elm) {
          this.procs_elm = angular.element(procs_elm);
        } else {
          this.procs_elm = angular.element("<div id='procs'></div>");
          this.$elm.append(this.procs_elm);
        }
      }
      if (this.mode === 'static') {
        this.$elm.append("<div style='height:1000px; width:10px;'></div>");
      }
      if (this.mode === 'display') {
        procs_cover_elm = document.getElementById('procs-cover');
        if (procs_cover_elm) {
          this.procs_cover_elm = angular.element(procs_cover_elm);
        } else {
          this.procs_cover_elm = (this.$compile("<div id='procs-cover' class='cover' style='display:none' ng-click='hide_procs();'></div>"))(this.$scope);
          this.procs_elm.append(this.procs_cover_elm);
        }
        this.$scope.$watch(this.hash_watcher.bind(this), this.on_hash_watcher.bind(this));
      }
      if (this.mode === 'display' || this.mode === 'static') {
        interpolated_markdown = (this.$interpolate(markdown_text))(this.$scope);
        markdown_service = new this.MarkdownService(interpolated_markdown, this.resource_id, this.mode);
        markdown_html = markdown_service.get_html();
        compiled_markdown = (this.$compile(markdown_html))(this.$scope);
        return this.markdown_elm.append(compiled_markdown);
      } else if (this.mode === 'edit') {
        return this.markdown_elm.text(markdown_text);
      }
    };

    MarkdownDirective.prototype.hash_watcher = function() {
      return this.$rootScope.__hash;
    };

    MarkdownDirective.prototype.on_hash_watcher = function(hash, old_hash) {
      if (hash === '' || hash === void 0) {
        return this.procs_cover_elm.css('display', 'none');
      } else {
        return this.procs_cover_elm.css('display', 'block');
      }
    };

    return MarkdownDirective;

  })(ModeDirective);

  FileDirective = (function(_super) {
    __extends(FileDirective, _super);

    function FileDirective() {
      return FileDirective.__super__.constructor.apply(this, arguments);
    }

    FileDirective.prototype.__name = 'file';

    FileDirective.prototype.__injections = BaseDirective.prototype.__injections.concat(['$rootScope', 'fetch_file', 'FETCHING']);

    FileDirective.prototype.link = function(scope, elm, attrs, controller) {
      FileDirective.__super__.link.call(this, scope, elm, attrs, controller);
      this.file_path = elm.attr('src');
      if (elm.attr('first_line')) {
        this.first_line = parseInt(elm.attr('first_line'));
      }
      if (elm.attr('last_line')) {
        this.last_line = parseInt(elm.attr('last_line'));
      }
      if (elm.attr('ext')) {
        this.extension = elm.attr('extension');
      }
      return this.$scope.$watch(this.get_file.bind(this), this.on_file_watcher.bind(this));
    };

    FileDirective.prototype.get_file = function() {
      this.file = this.$rootScope.__files[this.file_path];
      return this.file;
    };

    FileDirective.prototype.on_file_watcher = function(file, old_file) {
      if (file === void 0) {
        return this.fetch_file(this.file_path);
      } else if (file !== this.FETCHING) {
        return this.on_file();
      }
    };

    FileDirective.prototype.on_file = function() {
      var first_index, l, last_index, lines, _i, _len, _ref;
      lines = this.file.split('\n');
      if (this.last_line) {
        last_index = this.last_line - 1;
        lines = lines.slice(0, +last_index + 1 || 9e9);
      }
      if (this.first_line) {
        first_index = this.first_line - 1;
        lines = lines.slice(first_index);
      }
      this.text = lines[0];
      _ref = lines.slice(1);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        l = _ref[_i];
        this.text += "\n" + l;
      }
      return this.display();
    };

    FileDirective.prototype.display = function() {

      /*
      Append resource to @$elm
       */
      var code_elm, code_html, pre;
      this.$elm.empty();
      pre = "<pre></pre>";
      pre = angular.element(pre);
      pre.text(this.text);
      if (this.extension) {
        code_html = "<code class='" + this.extension + "'></code>";
      } else {
        code_html = "<code></code>";
      }
      code_elm = angular.element(code_html);
      code_elm.append(pre);
      hljs.highlightBlock(code_elm[0]);
      return this.$elm.append(code_elm);
    };

    return FileDirective;

  })(BaseDirective);

  PopupDirective = (function(_super) {
    __extends(PopupDirective, _super);

    function PopupDirective() {
      return PopupDirective.__super__.constructor.apply(this, arguments);
    }

    PopupDirective.prototype.__name = 'popup';

    PopupDirective.prototype.__injections = HashDirective.prototype.__injections.concat(['MarkdownService', 'path_manipulator']);

    PopupDirective.prototype.display = function() {
      var id, text00, text01;
      this.$elm.empty();
      id = this.path_manipulator.id_of_path(this.resource_id);
      text00 = angular.element("<a href='#" + id + "'>" + this.resource.data.text[0] + "</a>");
      text01 = (new this.MarkdownService(this.resource.data.text[1], this.resource_id, 'display')).get_html();
      return this.$elm.append(text00);
    };

    return PopupDirective;

  })(HashDirective);

  ProcDirective = (function(_super) {
    __extends(ProcDirective, _super);

    ProcDirective.prototype.__name = 'proc';

    ProcDirective.prototype.__injections = HashDirective.prototype.__injections.concat(['MarkdownService', 'path_manipulator', '$document']);

    function ProcDirective() {
      this.body = (this.$document.find('body'))[0];
      this.document = this.$document[0];
    }

    ProcDirective.prototype.watch_visible = function() {
      return this.$scope.visible;
    };

    ProcDirective.prototype.on_visible_watcher = function(visible, old_visible) {
      return this.on_visible();
    };

    ProcDirective.prototype.on_visible = function() {
      if (this.$scope.visible) {
        return this.show();
      } else {
        return this.hide();
      }
    };

    ProcDirective.prototype.show = function() {
      var scroll_y;
      scroll_y = this.document.documentElement.scrollTop || this.body.scrollTop;
      this.partial_elm.css('display', 'block');
      return this.partial_elm.css('top', scroll_y + "px");
    };

    ProcDirective.prototype.hide = function() {
      this.partial_elm.css('display', 'none');
      return this.$scope.$broadcast('hide');
    };

    ProcDirective.prototype.on_hide_procs = function() {
      this.$scope.visible = false;
      return this.$scope.$broadcast('hide');
    };

    ProcDirective.prototype.display = function() {
      var li, proc_a, proc_container, proc_title_a, steps_div, title, title_html;
      if (this.$rootScope.__displayed_resources[this.resource_id] !== void 0) {
        return;
      }
      this.procs_div = angular.element(document.getElementById('procs'));
      this.proc_list = angular.element(document.getElementById('proc-list'));
      this.partial_elm = (this.$compile("<div ng-click='hide();' class='proc-partial'></div>"))(this.$scope);
      proc_container = angular.element("<div class='proc-container' ng-click='$event.stopPropagation();'>");
      proc_a = angular.element("<a class='proc-hide proc-button' href='' ng-click='hide();'>x</a>");
      steps_div = angular.element("<div class='steps'></div>");
      proc_container.append(proc_a);
      proc_container.append(steps_div);
      this.partial_elm.append((this.$compile(proc_container))(this.$scope));
      this.procs_div.append(this.partial_elm);
      this.$rootScope.__displayed_resources[this.resource_id] = this.partial_elm;
      this.steps_elm = "<div src='" + this.resource_id + "' embed></div>";
      this.steps_elm = (this.$compile(this.steps_elm))(this.$scope);
      steps_div.append(this.steps_elm);
      if (this.proc_list !== void 0) {
        title = this.resource['data']['title'];
        if (title === void 0) {
          title = "Not found: " + this.resource_id;
        }
        title_html = (new this.MarkdownService(title, this.resource_id, 'display')).get_html();
        proc_title_a = angular.element("<a href='#" + (this.path_manipulator.id_of_path(this.resource_id)) + "' class='proc-title'></a>");
        proc_title_a.append(title_html);
        li = angular.element("<li></li>");
        li.append(proc_title_a);
        this.proc_list.append(li);
      }
      this.$scope.$watch(this.watch_visible.bind(this), this.on_visible_watcher.bind(this));
      return this.$scope.$on('hide_procs', this.on_hide_procs.bind(this));
    };

    ProcDirective.prototype.display_static = function() {
      var procs_div, steps_div;
      steps_div = angular.element("<div class='steps'></div>");
      procs_div = angular.element(document.getElementById('procs'));
      this.partial_elm = angular.element("<div></div>");
      this.partial_elm.append(steps_div);
      procs_div.append(this.partial_elm);
      this.steps_elm = "<div src='" + this.resource_id + "' embed></div>";
      this.steps_elm = (this.$compile(this.steps_elm))(this.$scope);
      return steps_div.append(this.steps_elm);
    };

    ProcDirective.prototype.on_mode = function() {
      ProcDirective.__super__.on_mode.call(this);
      this.hash_id = this.path_manipulator.id_of_path(this.resource_id);
      switch (this.mode) {
        case 'static':
          return this.display_static();
        default:
          return this.display();
      }
    };

    ProcDirective.prototype.on_hash = function() {
      if (this.hash_id === this.hash) {
        return this.$scope.visible = true;
      } else {
        return this.$scope.visible = false;
      }
    };

    return ProcDirective;

  })(HashDirective);

  StepsDirective = (function(_super) {
    __extends(StepsDirective, _super);

    function StepsDirective() {
      return StepsDirective.__super__.constructor.apply(this, arguments);
    }

    StepsDirective.prototype.__name = 'steps';

    StepsDirective.prototype.__injections = ModeDirective.prototype.__injections.concat(['MarkdownService', 'path_manipulator']);

    StepsDirective.prototype.step_watcher = function() {
      return this.$scope.current_step;
    };

    StepsDirective.prototype.on_step_watcher = function(step, old_step) {
      return this.on_step();
    };

    StepsDirective.prototype.on_step = function() {
      this.hide_all_steps();
      return this.show_current_step();
    };

    StepsDirective.prototype.hide_all_steps = function() {
      var step_elm, _i, _len, _ref, _results;
      _ref = this.step_elms;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        step_elm = _ref[_i];
        _results.push(step_elm.css('display', 'none'));
      }
      return _results;
    };

    StepsDirective.prototype.on_parent_hide = function() {
      if (this.$scope.default_step !== void 0) {
        return this.$scope.current_step = this.$scope.default_step;
      } else {
        return this.$scope.current_step = 0;
      }
    };

    StepsDirective.prototype.show_current_step = function() {
      return this.step_elms[this.$scope.current_step].css('display', 'block');
    };

    StepsDirective.prototype.install_partial = function() {
      var compiled_html, next, previous;
      if (this.mode === 'display') {
        previous = "<a class='proc-button steps-previous' href='' ng-click='previous_step();'>&lt;</href>";
        next = "<a class='proc-button steps-next' href='' ng-click='next_step();'>&gt;</href>";
        compiled_html = (this.$compile("" + previous + next))(this.$scope);
      } else if (this.mode === 'static') {
        compiled_html = "<div class='steps'></div>";
      } else {
        compiled_html = "<div></div>";
      }
      return this.$elm.append(compiled_html);
    };

    StepsDirective.prototype.display_title = function() {
      var converter, title, title_html;
      title = this.resource['data']['title'];
      converter = new this.MarkdownService(title, this.resource_id, this.mode);
      title_html = (this.$compile(converter.get_html()))(this.$scope);
      title_html.addClass('step-title');
      title_html.addClass('proc-button');
      this.$elm.append(title_html);
      return title_html;
    };

    StepsDirective.prototype.display_steps = function() {
      var compiled_html, default_step, html, i, step, step_path, _i, _len, _ref, _results;
      this.step_elms = [];
      default_step = this.resource['data']['default'][0];
      _ref = this.resource['data']['steps'];
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        step = _ref[i];
        step_path = this.path_manipulator.resolve_path(this.resource_id, step);
        this.$scope.step_indices[step_path] = i;
        this.$scope.step_titles.push(void 0);
        if (step === default_step) {
          this.$scope.default_step = i;
          this.$scope.current_step = i;
        }
        html = "<div src='" + step_path + "' embed></div>";
        compiled_html = (this.$compile(html))(this.$scope);
        this.$elm.append(compiled_html);
        _results.push(this.step_elms.push(compiled_html));
      }
      return _results;
    };

    StepsDirective.prototype.display_steps_static = function() {
      var compiled_html, default_step, html, i, id, step, step_path, title_html, _i, _len, _ref, _results;
      this.step_elms = [];
      default_step = this.resource['data']['default'][0];
      _ref = this.resource['data']['steps'];
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        step = _ref[i];
        id = this.$scope.default_id;
        if (step === default_step) {
          this.$scope.default_step = i;
          this.$scope.current_step = i;
        } else {
          id = id + "-" + i;
        }
        title_html = this.display_title();
        title_html.attr('id', id);
        title_html.addClass('title-static');
        title_html.append("&nbsp;&nbsp;&nbsp;&nbsp;<a href=''>⇫</a>");
        step_path = this.path_manipulator.resolve_path(this.resource_id, step);
        this.$scope.step_indices[step_path] = i;
        this.$scope.step_titles.push(void 0);
        html = "<div src='" + step_path + "' embed></div>";
        compiled_html = (this.$compile(html))(this.$scope);
        this.$elm.append(compiled_html);
        _results.push(this.step_elms.push(compiled_html));
      }
      return _results;
    };

    StepsDirective.prototype.display = function() {
      this.install_partial();
      this.display_title();
      this.display_steps();
      this.$scope.$watch(this.step_watcher.bind(this), this.on_step_watcher.bind(this));
      return this.$scope.$on('hide', this.on_parent_hide.bind(this));
    };

    StepsDirective.prototype.display_static = function() {
      this.install_partial();
      return this.display_steps_static();
    };

    StepsDirective.prototype.on_mode = function() {
      this.$scope.steps_length = this.resource['data']['steps'].length;
      this.$scope.step_titles = [];
      this.$scope.step_indices = {};
      this.$scope.default_step = 0;
      this.$scope.default_id = this.path_manipulator.id_of_path(this.resource_id);
      switch (this.mode) {
        case 'static':
          return this.display_static();
        default:
          return this.display();
      }
    };

    return StepsDirective;

  })(ModeDirective);

  StepDirective = (function(_super) {
    __extends(StepDirective, _super);

    function StepDirective() {
      return StepDirective.__super__.constructor.apply(this, arguments);
    }

    StepDirective.prototype.__name = 'step';

    StepDirective.prototype.__injections = ModeDirective.prototype.__injections.concat(['MarkdownService', 'path_manipulator']);

    StepDirective.prototype.set_canvas_id = function() {
      this.canvas_id = this.resource_id;
      this.canvas_id = this.canvas_id.slice(1);
      this.canvas_id = this.canvas_id.replace(/\//g, '-');
      if (this.mode === 'static') {
        return this.canvas_id = "" + this.canvas_id;
      } else {
        return this.canvas_id = this.canvas_id + "-" + this.$scope.$id;
      }
    };

    StepDirective.prototype.add_canvas_note = function(note) {
      var background, background_rect, background_stroke, fill, fontSize, fontWeight, heigth, left, rect, stroke, text, top, width;
      switch (note['type']) {
        case 'text':
          text = note['text'];
          top = note['top'];
          left = note['left'];
          if ('background' in note) {
            background = note['background'];
          } else {
            background = 'black';
          }
          if ('fill' in note) {
            fill = note['fill'];
          } else {
            fill = 'red';
          }
          if ('fontSize' in note) {
            fontSize = note['fontSize'];
          } else {
            fontSize = 22;
          }
          if ('fontWeight' in note) {
            fontWeight = note['fontWeight'];
          } else {
            fontWeight = 'bold';
          }
          text = new fabric.Text(text, {
            top: top,
            left: left,
            textBackgroundColor: background,
            fill: fill,
            fontSize: fontSize,
            fontWeight: fontWeight
          });
          return this.canvas.add(text);
        case 'box':
          top = note['top'];
          left = note['left'];
          width = note['width'];
          heigth = note['height'];
          if ('stroke' in note) {
            stroke = note['stroke'];
          } else {
            stroke = 'red';
          }
          if ('background_stroke' in note) {
            background_stroke = note['background_stroke'];
          } else {
            background_stroke = 'black';
          }
          background_rect = new fabric.Rect({
            top: top,
            left: left,
            width: width,
            height: heigth,
            stroke: background_stroke,
            strokeWidth: 5,
            fill: 'transparent',
            opacity: 0.9
          });
          rect = new fabric.Rect({
            top: top,
            left: left,
            width: width,
            height: heigth,
            stroke: stroke,
            strokeWidth: 5,
            fill: 'transparent',
            strokeDashArray: [5, 5],
            opacity: 1.0
          });
          this.canvas.add(background_rect);
          return this.canvas.add(rect);
      }
    };

    StepDirective.prototype.log_canvas_edits = function(event) {
      var msg, target;
      target = event.target;
      msg = "\n\n\ntop: " + (parseInt(target.top)) + "\nleft: " + (parseInt(target.left)) + "\nheight: " + (parseInt(target.height * target.scaleY)) + "\nwidth: " + (parseInt(target.width * target.scaleX)) + "\n\n";
      return this.$log.info(msg);
    };

    StepDirective.prototype.add_canvas_notes = function() {
      var note, _i, _len, _ref, _results;
      _ref = this.image['notes'];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        note = _ref[_i];
        _results.push(this.add_canvas_note(note));
      }
      return _results;
    };

    StepDirective.prototype.scale_image = function() {
      if (this.image.width > this.canvas.width) {
        this.image.scaleToWidth(this.canvas.width);
      }
      if (this.image.height > this.canvas.height) {
        this.image.scaleToHeight(this.canvas.height);
      }
      if ((this.image.width * this.image.scaleX) < this.canvas.width) {
        return this.image.set({
          left: (this.canvas.width - this.image.width * this.image.scaleX) / 2
        });
      }
    };

    StepDirective.prototype.add_image = function() {
      this.canvas.add(this.image);
      return this.canvas.sendToBack(this.image);
    };

    StepDirective.prototype.image_fetcher = function(image) {
      this.image = image;
      this.scale_image();
      return this.add_image();
    };

    StepDirective.prototype.populate_canvas = function() {
      var img_src;
      this.image = this.resource['data']['image'];
      img_src = this.path_manipulator.resolve_path(this.resource_id, this.image['src']);
      fabric.Image.fromURL(img_src, this.image_fetcher.bind(this));
      return this.add_canvas_notes();
    };

    StepDirective.prototype.step_titles_watcher = function() {
      var step_title, _i, _len, _ref;
      _ref = this.$scope.$parent.step_titles;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        step_title = _ref[_i];
        if (step_title === void 0) {
          return false;
        }
      }
      return true;
    };

    StepDirective.prototype.on_step_titles = function(ready, old_ready) {
      if (ready) {
        return this.display();
      }
    };

    StepDirective.prototype.on_mode = function() {
      var converter, title;
      title = this.resource['data']['title'];
      converter = new this.MarkdownService(title, this.resource_id);
      this.title_html = (this.$compile(converter.get_html()))(this.$scope);
      if (this.$scope.$parent.step_indices === void 0) {
        this.$scope.$parent.step_indices = {};
        this.$scope.$parent.step_indices[this.resource_id] = 0;
      }
      if (this.$scope.$parent.step_titles === void 0) {
        this.$scope.$parent.step_titles = [void 0];
      }
      if (this.$scope.$parent.default_step === void 0) {
        this.$scope.$parent.default_step = 0;
      }
      this.step_index = this.$scope.$parent.step_indices[this.resource_id];
      this.$scope.$parent.step_titles[this.step_index] = this.title_html;
      if (this.destroy_step_titles_watcher !== void 0) {
        this.destroy_step_titles_watcher();
      }
      return this.destroy_step_titles_watcher = this.$scope.$watch(this.step_titles_watcher.bind(this), this.on_step_titles.bind(this));
    };

    StepDirective.prototype.display = function() {
      var a, canvas_html, href, li, ol, step_index, step_title, step_titles, _i, _len;
      step_titles = [this.title_html.clone()];
      if (this.$scope.$parent.step_titles !== void 0) {
        step_titles = this.$scope.$parent.step_titles;
      }
      ol = angular.element("<ol></ol>");
      for (step_index = _i = 0, _len = step_titles.length; _i < _len; step_index = ++_i) {
        step_title = step_titles[step_index];
        li = angular.element("<li></li>");
        li.addClass('step-enum');
        if (step_index === this.step_index) {
          li.addClass('current-step');
        } else {
          li.addClass('not-current-step');
        }
        if (this.mode === 'display') {
          a = angular.element("<a href='' class='step-a' ng-click='goto_step(" + step_index + ");'></a>");
          a = (this.$compile(a))(this.$scope);
        } else if (this.mode === 'static') {
          href = "#" + this.$scope.$parent.default_id;
          if (step_index !== this.$scope.$parent.default_step) {
            href = href + "-" + step_index;
          }
          a = angular.element("<a href='" + href + "' class='step-a'></a>");
        }
        if (step_title !== void 0) {
          a.append(step_title.clone());
        } else {
          a.append("&nbsp;");
        }
        li.append(a);
        ol.append(li);
      }
      this.$elm.append(ol);
      this.set_canvas_id();
      canvas_html = "<canvas  width='650px' height='356px' id='" + this.canvas_id + "'></canvas>";
      this.$elm.append(canvas_html);
      this.canvas = new fabric.Canvas(this.canvas_id);
      this.canvas.on('mouse:up', this.log_canvas_edits.bind(this));
      return this.populate_canvas();
    };

    return StepDirective;

  })(ModeDirective);

  RootDirective = (function(_super) {
    __extends(RootDirective, _super);

    function RootDirective() {
      return RootDirective.__super__.constructor.apply(this, arguments);
    }

    RootDirective.prototype.__name = 'root';

    RootDirective.prototype.__injections = ResourceDirective.prototype.__injections.concat(['$location']);

    RootDirective.prototype.get_path = function() {
      this.path = this.$location.path();
      return this.path;
    };

    RootDirective.prototype.on_path_watcher = function(path, old_path) {
      this.path = path;
      return this.on_path();
    };

    RootDirective.prototype.on_path = function() {

      /*
      Re-initialize and watch resource
       */
      this.$rootScope.__displayed_resources = {};
      this.resource_id = this.path;
      if (this.destroy_resource_watcher !== void 0) {
        this.destroy_resource_watcher();
      }
      return this.destroy_resource_watcher = this.$scope.$watch(this.get_resource.bind(this), this.on_resource_watcher.bind(this));
    };

    RootDirective.prototype.get_search = function() {
      this.search = this.$location.search();
      return this.search;
    };

    RootDirective.prototype.on_search_watcher = function(search, old_search) {
      this.search = search;
      return this.on_search();
    };

    RootDirective.prototype.on_search = function() {
      if ('edit' in this.search) {
        this.$rootScope.__mode = 'edit';
      }
      if ('static' in this.search) {
        return this.$rootScope.__mode = 'static';
      } else {
        return this.$rootScope.__mode = 'display';
      }
    };

    RootDirective.prototype.hash_watcher = function() {
      return this.$location.hash();
    };

    RootDirective.prototype.on_hash_watcher = function(hash, previous_hash) {
      this.$rootScope.__hash = hash;
      return this.on_hash();
    };

    RootDirective.prototype.on_hash = function() {
      if (this.$rootScope.__hash === '') {
        return this.$rootScope.__hash = void 0;
      }
    };

    RootDirective.prototype.link = function(scope, elm, attrs, controller) {

      /*
      Avoid ResourceDirective.link, which starts with resource watcher
       */
      ResourceDirective.__super__.link.call(this, scope, elm, attrs, controller);
      this.$scope.$watch(this.get_path.bind(this), this.on_path_watcher.bind(this));
      this.$scope.$watch(this.get_search.bind(this), this.on_search_watcher.bind(this));
      return this.$scope.$watch(this.hash_watcher.bind(this), this.on_hash_watcher.bind(this));
    };

    return RootDirective;

  })(ResourceDirective);

  TabsDirective = (function(_super) {
    __extends(TabsDirective, _super);

    function TabsDirective() {
      return TabsDirective.__super__.constructor.apply(this, arguments);
    }

    TabsDirective.prototype.__name = 'tabs';

    TabsDirective.prototype.__injections = ResourceDirective.prototype.__injections.concat(['first_child_of_class', 'path_manipulator', 'MarkdownService']);

    TabsDirective.prototype.tab_watcher = function() {
      return this.$scope.current_tab;
    };

    TabsDirective.prototype.on_tab_watcher = function(tab_index, previous_tab_index) {
      if (tab_index !== void 0) {
        return this.on_tab();
      }
    };

    TabsDirective.prototype.on_tab = function() {
      this.hide_all_tabs();
      return this.show_current_tab();
    };

    TabsDirective.prototype.hide_all_tabs = function() {
      var tab, _i, _len, _ref, _results;
      _ref = this.tabs;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        tab = _ref[_i];
        tab.title_elm.removeClass('current-tab');
        _results.push(tab.text_elm.css('display', 'none'));
      }
      return _results;
    };

    TabsDirective.prototype.show_current_tab = function() {
      var current_tab;
      current_tab = this.tabs[this.$scope.current_tab];
      current_tab.title_elm.addClass('current-tab');
      return current_tab.text_elm.css('display', 'block');
    };

    TabsDirective.prototype.on_hide = function() {
      return this.$scope.current_tab = 0;
    };

    TabsDirective.prototype.display = function() {
      var embed_html, new_tab, new_tab_text, tab, tab_text, tab_text_html, tab_title_html, tabs, tabs_header, tabs_title, title_html, _i, _len, _ref;
      tabs_header = angular.element("<div class='tabs-header'></div>");
      tabs_title = angular.element("<span class='proc-button tabs-title'></span>");
      tabs = angular.element("<span class='tabs'></span>");
      tab_text = angular.element("<span class='tab-text'></span>");
      tabs_header.append(tabs_title);
      tabs_header.append(tabs);
      this.$elm.append(tabs_header);
      this.$elm.append(tab_text);
      title_html = (new this.MarkdownService(this.resource['data']['title'], this.resource_id, this.mode)).get_html();
      tabs_title.append(title_html);
      this.tabs = [];
      _ref = this.resource['data']['tabs'];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        tab = _ref[_i];
        tab_title_html = (new this.MarkdownService(tab['title'], this.resource_id, this.mode)).get_html();
        new_tab = "<a href='' class='proc-button tab' ng-click='goto_tab(" + this.tabs.length + ");'></a>";
        new_tab = (this.$compile(new_tab))(this.$scope);
        new_tab.append(tab_title_html);
        tabs.append(new_tab);
        if ('text' in tab) {
          tab_text_html = (new this.MarkdownService(tab['text'], this.resource_id, this.mode)).get_html();
          tab_text_html = (this.$compile(tab_text_html))(this.$scope);
          new_tab_text = angular.element("<spann class='tab-text'></span>");
          new_tab_text.append(tab_text_html);
          tab_text.append(new_tab_text);
        } else if ('embed' in tab) {
          embed_html = "<div class='tab-text' src=" + (this.path_manipulator.resolve_path(this.resource_id, tab['embed'])) + " embed></div>";
          new_tab_text = (this.$compile(embed_html))(this.$scope);
          tab_text.append(new_tab_text);
        }
        this.tabs.push({
          title_elm: new_tab,
          text_elm: new_tab_text
        });
      }
      this.$scope.$watch(this.tab_watcher.bind(this), this.on_tab_watcher.bind(this));
      return this.$scope.$on('hide', this.on_hide.bind(this));
    };

    return TabsDirective;

  })(ResourceDirective);

  QuestionsDirective = (function(_super) {
    __extends(QuestionsDirective, _super);

    function QuestionsDirective() {
      return QuestionsDirective.__super__.constructor.apply(this, arguments);
    }

    QuestionsDirective.prototype.__name = 'questions';

    QuestionsDirective.prototype.__injections = ResourceDirective.prototype.__injections.concat(['MarkdownService']);

    QuestionsDirective.prototype.display = function() {
      var answer_html, error_cell, error_title, new_row, pair, question_html, solution_cell, solution_title, title_row, _i, _len, _ref, _results;
      this.table_elm = angular.element("<div class='questions-table'></div>");
      title_row = angular.element("<div class='questions-row questions-header'></div>");
      error_title = angular.element("<span class='questions-cell questions-title questions-title-error'>Erreur</span>");
      solution_title = angular.element("<span class='questions-cell questions-title questions-title-solution'>Piste de solution</span>");
      title_row.append(error_title);
      title_row.append(solution_title);
      this.table_elm.append(title_row);
      this.$elm.append(this.table_elm);
      _ref = this.resource['data'];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        pair = _ref[_i];
        question_html = (new this.MarkdownService(pair['question'], this.resource_id, this.mode)).get_html();
        answer_html = (new this.MarkdownService(pair['answer'], this.resource_id, this.mode)).get_html();
        question_html = (this.$compile(question_html))(this.$scope);
        answer_html = (this.$compile(answer_html))(this.$scope);
        new_row = angular.element("<div class='questions-row'></div>");
        error_cell = angular.element("<div class='questions-cell questions-cell-error'></div>");
        solution_cell = angular.element("<div class='questions-cell questions-cell-solution'></div>");
        error_cell.append(question_html);
        solution_cell.append(answer_html);
        new_row.append(error_cell);
        new_row.append(solution_cell);
        _results.push(this.table_elm.append(new_row));
      }
      return _results;
    };

    return QuestionsDirective;

  })(ResourceDirective);

  install_angular_cls(directives_module, EmbedDirective);

  install_angular_cls(directives_module, MarkdownDirective);

  install_angular_cls(directives_module, FileDirective);

  install_angular_cls(directives_module, RootDirective);

  install_angular_cls(directives_module, ErrorDirective);

  install_angular_cls(directives_module, StepsDirective);

  install_angular_cls(directives_module, StepDirective);

  install_angular_cls(directives_module, ProcDirective);

  install_angular_cls(directives_module, TabsDirective);

  install_angular_cls(directives_module, QuestionsDirective);

}).call(this);
